/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
import { createSelector } from "@reduxjs/toolkit";
import { ScheduleMode } from "../../../components/schedule/schedule-state.model";
import { ApplicationStateModel } from "../../application-state.model";

const selectPresentSchedule = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present;
export const getPresentSchedule = createSelector(selectPresentSchedule, (state) => state);

const selectPastSchedule = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.past;
export const getPastSchedules = createSelector(selectPastSchedule, (state) => state);

const selectPresentScheduleInfo = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.schedule_info;

export const getPresentScheduleInfo = createSelector(selectPresentScheduleInfo, (state) => state);

const selectPresentScheduleIsCorrupted = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.isCorrupted;

export const getPresentScheduleIsCorrupted = createSelector(
  selectPresentScheduleIsCorrupted,
  (state) => state
);
const selectPresentScheduleIsAutogenerated = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.isAutoGenerated;

export const getPresentScheduleIsAutogenerated = createSelector(
  selectPresentScheduleIsAutogenerated,
  (state) => state
);

const selectPresentScheduleMonthInfo = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.month_info;

export const getPresentScheduleMonthInfo = createSelector(
  selectPresentScheduleMonthInfo,
  (state) => state
);

const selectPresentScheduleShifts = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.shifts;

export const getPresentScheduleShifts = createSelector(
  selectPresentScheduleShifts,
  (state) => state
);

const selectPresentTemporaryScheduleShifts = (state: ApplicationStateModel) =>
  state.actualState.temporarySchedule.present.shifts;

export const getPresentTemporaryScheduleShifts = createSelector(
  selectPresentTemporaryScheduleShifts,
  (state) => state
);

const selectActualState = (state: ApplicationStateModel) => state.actualState;

export const getActualState = createSelector(selectActualState, (state) => state);

const selectActualMode = (state: ApplicationStateModel) => state.actualState.mode;

export const getActualMode = createSelector(selectActualMode, (state) => state);

const selectActualRevision = (state: ApplicationStateModel) => state.actualState.revision;

export const getActualRevision = createSelector(selectActualRevision, (state) => state);

const selectPrimaryRevision = (state: ApplicationStateModel) => state.actualState.primaryRevision;

export const getPrimaryRevision = createSelector(selectPrimaryRevision, (state) => state);

const selectScheduleErrors = (state: ApplicationStateModel) => state.actualState.scheduleErrors;

export const getScheduleErrors = createSelector(selectScheduleErrors, (state) => state);

const selectPresentTemporarySchedule = (state: ApplicationStateModel) =>
  state.actualState.temporarySchedule?.present;

export const getPresentTemporarySchedule = createSelector(
  selectPresentTemporarySchedule,
  (state) => state
);

const selectPresentTemporaryScheduleInfo = (state: ApplicationStateModel) =>
  state.actualState.temporarySchedule.present.schedule_info;

export const getPresentTemporaryScheduleInfo = createSelector(
  selectPresentTemporaryScheduleInfo,
  (state) => state
);

const isEditMode = (state: ApplicationStateModel) => state.actualState.mode === ScheduleMode.Edit;

export const getIsEditMode = createSelector(isEditMode, (state) => state);

const selectPresentWorkerNames = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.employee_info.type;

export const getPresentWorkerNames = createSelector(selectPresentWorkerNames, (state) =>
  Object.keys(state)
);

const selectPresentEmployeeInfo = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.employee_info;

export const getPresentEmployeeInfo = createSelector(selectPresentEmployeeInfo, (state) => state);

const selectPresentShiftTypes = (state: ApplicationStateModel) =>
  state.actualState.persistentSchedule.present.shift_types;

export const getPresentShiftTypes = createSelector(selectPresentShiftTypes, (state) => state);

const selectSchedule = (
  state: ApplicationStateModel,
  targetSchedule: "temporarySchedule" | "persistentSchedule"
) => state.actualState[targetSchedule].present;

export const getSchedule = createSelector(selectSchedule, (state) => state);

const selectTheme = (state: ApplicationStateModel) => state.theme;

export const getThemeKey = createSelector(selectTheme, (state) => state.key);

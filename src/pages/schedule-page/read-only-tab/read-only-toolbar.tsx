/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
import ErrorOutlineIcon from "@material-ui/icons/ErrorOutline";
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useHistory } from "react-router-dom";
import * as S from "./read-only-toolbar.styled";
import { ImportButtonsComponent } from "../../../components/buttons/import-buttons/import-buttons.component";
import { Button } from "../../../components/common-components";
import { t } from "../../../helpers/translations.helper";
import { VerboseDateHelper } from "../../../helpers/verbose-date.helper";
import {
  isRevisionType,
  RevisionTypeLabels,
} from "../../../logic/data-access/persistance-store.model";
import { changeRevision } from "../../../state/schedule-data/schedule-condition/revision-info.reducer";
import { AlgorithmErrorCode } from "../../../state/schedule-data/schedule-errors/schedule-error.model";
import {
  getActualRevision,
  getPresentScheduleIsAutogenerated,
  getPresentScheduleIsCorrupted,
  getPresentTemporaryScheduleInfo,
  getScheduleErrors,
} from "../../../state/schedule-data/selectors";
import FontStyles from "../../../assets/theme/FontStyles";

interface ViewOnlyToolbarOptions {
  openEdit: () => void;
}
export function ReadOnlyToolbar({ openEdit }: ViewOnlyToolbarOptions): JSX.Element {
  const [isEditDisable, setEditDisable] = React.useState(false);
  const [isMonthFromFuture, setIsMonthFromFuture] = React.useState(false);
  const [areAlgoErrorsPresent, setAreAlgoErrorsPresent] = React.useState(false);
  const dispatch = useDispatch();
  const history = useHistory();

  const { year, month_number: month } = useSelector(getPresentTemporaryScheduleInfo);

  const isAutoGenerated = useSelector(getPresentScheduleIsAutogenerated);

  const isCorrupted = useSelector(getPresentScheduleIsCorrupted);

  const revision = useSelector(getActualRevision);

  const scheduleErrors = useSelector(getScheduleErrors);

  useEffect(() => {
    const isFuture = VerboseDateHelper.isMonthInFuture(month, year);
    setIsMonthFromFuture(isFuture);

    const isRevisionEditDisable = revision === "actual" ? false : !isFuture;
    setEditDisable(isRevisionEditDisable || isCorrupted);

    setAreAlgoErrorsPresent(
      Object.values(AlgorithmErrorCode).some((errorCode) => errorCode in scheduleErrors)
    );
  }, [year, month, revision, isCorrupted, scheduleErrors]);

  const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>): void => {
    const currentRev = event.target.value;
    if (isRevisionType(currentRev)) {
      dispatch(changeRevision(currentRev));
    }
  };

  const onEditClick = (): void => {
    openEdit();
    history.push("/schedule-editing");
  };

  return (
    <>
      {!isAutoGenerated && (
        <S.Wrapper>
          <S.RevisionWrapper>
            {isMonthFromFuture ? (
              <p>{RevisionTypeLabels[revision]}</p>
            ) : (
              <form>
                <select
                  style={FontStyles.roboto.Regular14px}
                  value={revision[0].toUpperCase() + revision.substring(1)}
                  onChange={handleChange}
                  className="revision-select"
                  data-cy="revision-select"
                >
                  <option value="primary" data-cy="primary-revision">
                    {RevisionTypeLabels.primary}
                  </option>
                  <option value="actual" data-cy="actual-revision">
                    {RevisionTypeLabels.actual}
                  </option>
                </select>
              </form>
            )}
          </S.RevisionWrapper>
          {areAlgoErrorsPresent && (
            <S.ErrorPresentInfo className="errors-present-info">
              <ErrorOutlineIcon />
              <p>{t("scheduleHasErrors")}</p>
            </S.ErrorPresentInfo>
          )}
          <S.Filler />
          <ImportButtonsComponent />
          <Button
            onClick={onEditClick}
            size="small"
            variant="primary"
            data-cy="edit-mode-button"
            disabled={isEditDisable}
            style={{ marginLeft: "8px" }}
          >
            Edytuj
          </Button>
        </S.Wrapper>
      )}
    </>
  );
}

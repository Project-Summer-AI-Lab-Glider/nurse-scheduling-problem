/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
/// <reference types="cypress" />
import { ScheduleParser } from "../../../../../src/logic/schedule-parser/schedule.parser";
import {
  babysitterSection,
  exampleData,
  nurseSection,
} from "../../../../fixtures/unit/logic/schedule-parser/schedule.parser";
import {
  WorkersInfoModel,
  WorkerType,
} from "../../../../../src/state/schedule-data/worker-info/worker-info.model";
import { WorkerShiftsModel } from "../../../../../src/state/schedule-data/workers-shifts/worker-shifts.model";
import { ShiftCode } from "../../../../../src/state/schedule-data/shifts-types/shift-types.model";

// #region data declaration
// const emptyRow = [""];

// const expectedSchedule: ScheduleDataModel = {
//   schedule_info: { month_number: 10, year: 2020 },
//   shifts: shifts,
//   month_info: {
//     frozen_shifts: [],
//     children_number: dates.map(() => 1),
//     dates: dates,
//   },
//   employee_info: employee_info,
//   shift_types: {},
//   isAutoGenerated: false,
//   isCorrupted: false,
// };

// #endregion

describe("Schedule parser", () => {
  before(() => {
    fillWorkerInfo(shifts, employee_info, nurseSection, WorkerType.NURSE);
    fillWorkerInfo(shifts, employee_info, babysitterSection, WorkerType.OTHER);
  });

  const shifts: WorkerShiftsModel = {};
  const employee_info: WorkersInfoModel = { type: {}, time: {}, team: {} };
  const scheduleParser = new ScheduleParser(10, 2020, exampleData, [], []);
  const result = scheduleParser.schedule.getDataModel();
  // todo update test
  // it("check if workerTyp
  it("length of days must be was parsed correctly ", () => {
    //   for (const [key, value] of Object.entries(result.employee_info.type)) {
    //     expect(expectedSchedule.employee_info.type[key]).to.equal(value);
    //   }
    // });equal to length of shifts", () => {
    for (const [, value] of Object.entries(result.shifts)) {
      expect(value).to.have.lengthOf(result.month_info.dates.length);
    }
  });

  // todo update test
  // it("should check if input and output shifts are equal", () => {
  //   for (const [key, value] of Object.entries(result.shifts)) {
  //     expect(value).to.eql(expectedSchedule.shifts[key]);
  //   }
  // });
  // it("all babysitter and nurses are in  employee_info ", () => {
  //   expect(result.employee_info).to.have.keys(Object.keys(expectedSchedule.employee_info));
  // });
});

function fillWorkerInfo(
  shifts: WorkerShiftsModel,
  employeeInfo: WorkersInfoModel,
  section: string[][],
  sectionType: WorkerType
): void {
  section.forEach((element) => {
    shifts[element[0]] = element.slice(1).map((x) => ShiftCode[x] ?? ShiftCode.W);
    employeeInfo.type[element[0]] = sectionType;
    employeeInfo.time[element[0]] = 1;
  });
}
